!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=288)}({117:function(e,t){e.exports=((e,t,r)=>{if(0===t.length||0===r.length)return[];const n=e.numEdges(),o={},i=((e,t,r)=>{const n=new Set(t),o={};for(const t of r){o[t]=new Set;for(const r of e.inVertices(t))n.has(r)&&o[t].add(r)}return o})(e,t,r),s=e=>o[e],c=(e,t)=>i[t].size-i[e].size,f=(e,t)=>{let r=0;for(const n of e)for(const e of t)i[e].has(n)&&(r+=1);return r-e.length-t.length};r=Array.from(r);const a=[];let u=0;for(let l=0;l<n;++l){for(const e of t)o[e]=!0;if(r.sort(c),i[r[u]].size<=0)break;let n,l,h=-1,d=[];for(let i=u;i<r.length;++i){const c=r[i];let a=0;for(const r of t)o[r]&&(e.edge(r,c)?a+=1:o[r]=!1);d.push(c);let u=t.filter(s),g=f(u,d);g>h&&(h=g,n=u,l=Array.from(d))}if(h>-1){for(const e of l)for(const t of n)i[e].delete(t);a.push({source:Array.from(n),target:Array.from(l)}),u=0}else u+=1;if(u>=r.length)break}return a})},118:function(e,t){const r=e=>{const t={},r={},n=o=>{if(t[o])return r[o];t[o]=!0;let i=1/0;for(const t of e.outVertices(o))i=Math.min(i,n(t)-1);return i===1/0&&(i=0),r[o]=i,i};for(const t of e.vertices())0===e.inDegree(t)&&n(t);let o=1/0;for(const t of e.vertices())o=Math.min(o,r[t]);for(const t of e.vertices())r[t]-=o;return r};e.exports=class{call(e){return r(e)}}},119:function(e,t,r){const n=r(118),o=r(281);e.exports={LongestPath:n,QuadHeuristic:o}},120:function(e,t,r){const n=r(283);e.exports={CycleRemoval:n}},121:function(e,t){e.exports=((e,t,r)=>{const n=[];for(const r of e.vertices()){const e=t[r];void 0===n[e]&&(n[e]=[]),n[e].push(r)}if(r){for(let e=0;e<n.length;++e)void 0===n[e]&&(n[e]=[]);return n}return n.filter(e=>void 0!==e)})},122:function(e,t,r){const n=r(287),o=new WeakMap,i=e=>o.get(e);e.exports=class extends n{constructor(){super(),o.set(this,{vertices:new Map,numVertices:0,numEdges:0})}vertex(e){const t=i(this).vertices;return t.get(e)?t.get(e).data:null}edge(e,t){const r=i(this).vertices;return r.get(e)&&r.get(e).outVertices.get(t)?r.get(e).outVertices.get(t):null}vertices(){return Array.from(i(this).vertices.keys())}outVertices(e){if(null===this.vertex(e))throw new Error(`Invalid vertex: ${e}`);return Array.from(i(this).vertices.get(e).outVertices.keys())}inVertices(e){if(null===this.vertex(e))throw new Error(`Invalid vertex: ${e}`);return Array.from(i(this).vertices.get(e).inVertices.keys())}numVertices(){return i(this).numVertices}numEdges(){return i(this).numEdges}outDegree(e){if(null===this.vertex(e))throw new Error(`Invalid vertex: ${e}`);return i(this).vertices.get(e).outVertices.size}inDegree(e){if(null===this.vertex(e))throw new Error(`Invalid vertex: ${e}`);return i(this).vertices.get(e).inVertices.size}addVertex(e,t={}){if(this.vertex(e))throw new Error(`Duplicated vertex: ${e}`);return i(this).vertices.set(e,{outVertices:new Map,inVertices:new Map,data:t}),i(this).numVertices++,this}addEdge(e,t,r={}){if(null===this.vertex(e))throw new Error(`Invalid vertex: ${e}`);if(null===this.vertex(t))throw new Error(`Invalid vertex: ${t}`);if(this.edge(e,t))throw new Error(`Duplicated edge: (${e}, ${t})`);return i(this).numEdges++,i(this).vertices.get(e).outVertices.set(t,r),i(this).vertices.get(t).inVertices.set(e,r),this}removeVertex(e){for(const t of this.outVertices(e))this.removeEdge(e,t);for(const t of this.inVertices(e))this.removeEdge(t,e);return i(this).vertices.delete(e),i(this).numVertices--,this}removeEdge(e,t){if(null===this.edge(e,t))throw Error(`Invalid edge: (${e}, ${t})`);return i(this).vertices.get(e).outVertices.delete(t),i(this).vertices.get(t).inVertices.delete(e),i(this).numEdges--,this}}},260:function(e,t,r){const n=r(38),o=new WeakMap;e.exports=class{constructor(){o.set(this,{f:()=>0})}call(e){const t=o.get(this).f,r={};for(const n of e.vertices())r[n]=t(n);return r}f(){return n(this,o,"f",arguments)}}},261:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=r(260),i=(n=o)&&n.__esModule?n:{default:n};t.default=function(e){return(new i.default).f(function(t){var r=e.vertex(t);return r.dummy?2*Math.max.apply(Math,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e.inVertices(t).map(function(t){return e.vertex(t).layerOrder})))+1:2*r.layerOrder})}},262:function(e,t,r){var n,o,i;o=[],void 0===(i="function"==typeof(n=function(){"use strict";var e=function(e,t){for(var r=1;t--;)r*=e--;return r},t=function(t,r){return r>t?0:e(t,r)/e(r,r)},r=function(t){return e(t,t)},n=function(e,t){var n=1;if(t)n=r(t);else{for(t=1;n<e;n*=++t);n>e&&(n/=t--)}for(var o=[0];t;n/=t--)o[t]=Math.floor(e/n),e%=n;return o},o=function(e,t){Object.keys(t).forEach(function(r){Object.defineProperty(e,r,{value:t[r],configurable:"next"==r})})},i=function(e,t){Object.defineProperty(e,t,{writable:!0})},s=function(e){var t,r=[];for(this.init();t=this.next();)r.push(e?e(t):t);return this.init(),r},c={toArray:s,map:s,forEach:function(e){var t;for(this.init();t=this.next();)e(t);this.init()},filter:function(e){var t,r=[];for(this.init();t=this.next();)e(t)&&r.push(t);return this.init(),r},find:function(e){var t,r;for(this.init();t=this.next();)if(e(t)){r=t;break}return this.init(),r},lazyMap:function(e){return this._lazyMap=e,this},lazyFilter:function(e){if(Object.defineProperty(this,"next",{writable:!0}),"function"!=typeof e)this.next=this._next;else{"function"!=typeof this._next&&(this._next=this.next);var t=this._next.bind(this);this.next=function(){for(var r;r=t();)if(e(r))return r;return r}.bind(this)}return Object.defineProperty(this,"next",{writable:!1}),this}},f=function(e,r,n){if(r||(r=e.length),r<1)throw new RangeError;if(r>e.length)throw new RangeError;var s=(1<<r)-1,f=t(e.length,r),a=1<<e.length,u=function(){return f},l=Object.create(e.slice(),{length:{get:u}});return i(l,"index"),o(l,{valueOf:u,init:function(){this.index=s},next:function(){if(!(this.index>=a)){for(var e=0,t=this.index,r=[];t;t>>>=1,e++)1&t&&(r[r.length]=this[e]);return this.index=function(e){var t=e&-e,r=e+t;return r|((r&-r)/t>>1)-1}(this.index),"function"==typeof l._lazyMap?l._lazyMap(r):r}}}),o(l,c),l.init(),"function"==typeof n?l.map(n):l},a=function(e,r,n){if(r||(r=e.length),r<1)throw new RangeError;if(r>e.length)throw new RangeError;var s=function(e){for(var t=[],r=0;r<e;r++)t[r]=1;return t[0]=1,t}(r),f=t(e.length,r),a=e.length,u=function(){return f},l=Object.create(e.slice(),{length:{get:u}});return i(l,"index"),o(l,{valueOf:u,init:function(){this.index=s.concat()},next:function(){if(!(this.index.length>a)){for(var e=0,t=this.index,n=[],o=0;o<t.length;o++,e++)t[o]&&(n[n.length]=this[e]);return function(e,t){var r=e,n=t,o=0;for(o=r.length-1;o>=0&&1==r[o];o--)n--;if(0==n){r[r.length]=1;for(var i=r.length-2;i>=0;i--)r[i]=i<t-1?1:0}else{for(var s=-1,c=-1,o=0;o<r.length;o++)if(0==r[o]&&-1!=s&&(c=o),1==r[o]&&(s=o),-1!=c&&-1!=s){r[c]=1,r[s]=0;break}n=t;for(var o=r.length-1;o>=s;o--)1==r[o]&&n--;for(var o=0;o<s;o++)r[o]=o<n?1:0}}(this.index,r),"function"==typeof l._lazyMap?l._lazyMap(n):n}}}),o(l,c),l.init(),"function"==typeof n?l.map(n):l},u=function(e){var t=e.slice(),o=r(t.length);return t.index=0,t.next=function(){if(!(this.index>=o)){for(var e=this.slice(),r=n(this.index,this.length),i=[],s=this.length-1;s>=0;--s)i.push(e.splice(r[s],1)[0]);return this.index++,"function"==typeof t._lazyMap?t._lazyMap(i):i}},t},l=Array.prototype.slice,h=Object.create(null);return o(h,{C:t,P:e,factorial:r,factoradic:n,cartesianProduct:function(){if(!arguments.length)throw new RangeError;var e=l.call(arguments),t=e.reduce(function(e,t){return e*t.length},1),r=function(){return t},n=e.length,s=Object.create(e,{length:{get:r}});if(!t)throw new RangeError;return i(s,"index"),o(s,{valueOf:r,dim:n,init:function(){this.index=0},get:function(){if(arguments.length===this.length){for(var e=[],t=0;t<n;t++){var r=arguments[t];if(r>=this[t].length)return;e.push(this[t][r])}return"function"==typeof s._lazyMap?s._lazyMap(e):e}},nth:function(e){for(var t=[],r=0;r<n;r++){var o=this[r].length,i=e%o;t.push(this[r][i]),e-=i,e/=o}return"function"==typeof s._lazyMap?s._lazyMap(t):t},next:function(){if(!(this.index>=t)){var e=this.nth(this.index);return this.index++,e}}}),o(s,c),s.init(),s},combination:f,bigCombination:a,permutation:function(t,r,n){if(r||(r=t.length),r<1)throw new RangeError;if(r>t.length)throw new RangeError;var s=e(t.length,r),l=Object.create(t.slice(),{length:{get:function(){return s}}});return i(l,"cmb"),i(l,"per"),o(l,{valueOf:function(){return s},init:function(){t.length<31?this.cmb=f(t,r):this.cmb=a(t,r),this.per=u(this.cmb.next())},next:function(){var e=this.per.next();if(!e){var t=this.cmb.next();if(!t)return;return this.per=u(t),this.next()}return"function"==typeof l._lazyMap?l._lazyMap(e):e}}),o(l,c),l.init(),"function"==typeof n?l.map(n):l},permutationCombination:function(t,r){var n=function(t){for(var r=0,n=1;n<=t;n++){var o=e(t,n);r+=o}return r}(t.length),s=Object.create(t.slice(),{length:{get:function(){return n}}});return i(s,"cmb"),i(s,"per"),i(s,"nelem"),o(s,{valueOf:function(){return n},init:function(){this.nelem=1,this.cmb=f(t,this.nelem),this.per=u(this.cmb.next())},next:function(){var e=this.per.next();if(!e){var r=this.cmb.next();if(!r){if(this.nelem++,this.nelem>t.length)return;if(this.cmb=f(t,this.nelem),!(r=this.cmb.next()))return}return this.per=u(r),this.next()}return"function"==typeof s._lazyMap?s._lazyMap(e):e}}),o(s,c),s.init(),"function"==typeof r?s.map(r):s},power:function(e,t){var r=1<<e.length,n=function(){return r},s=Object.create(e.slice(),{length:{get:n}});return i(s,"index"),o(s,{valueOf:n,init:function(){s.index=0},nth:function(e){if(!(e>=r)){for(var t=0,n=[];e;e>>>=1,t++)1&e&&n.push(this[t]);return"function"==typeof s._lazyMap?s._lazyMap(n):n}},next:function(){return this.nth(this.index++)}}),o(s,c),s.init(),"function"==typeof t?s.map(t):s},baseN:function(e,t,r){if(t||(t=e.length),t<1)throw new RangeError;var n=e.length,s=Math.pow(n,t),f=function(){return s},a=Object.create(e.slice(),{length:{get:f}});return i(a,"index"),o(a,{valueOf:f,init:function(){a.index=0},nth:function(r){if(!(r>=s)){for(var o=[],i=0;i<t;i++){var c=r%n;o.push(e[c]),r-=c,r/=n}return"function"==typeof a._lazyMap?a._lazyMap(o):o}},next:function(){return this.nth(this.index++)}}),o(a,c),a.init(),"function"==typeof r?a.map(r):a},VERSION:"0.5.3"}),h})?n.apply(t,o):n)||(e.exports=i)},263:function(e,t,r){const{combination:n}=r(262),o=function*(e,t){if(e.size>0){for(let r=t;r>0;--r){const t=n(Array.from(e),Math.min(r,e.size));for(;;){const e=t.next();if(!e)break;yield e}}yield[]}},i=(e,t,r,n)=>{const o=new Set(n?e.inVertices(t):e.outVertices(t));let i=0;for(const e of r)o.has(e)||(i+=1);return i},s=(e,t)=>{const r=new Set;for(const n of e)t.has(n)&&r.add(n);return r},c=(e,t)=>{for(const r of t)e.delete(r);return e},f=(e,t,r,n,a,u,l,h)=>{const d=((e,t)=>{const r=new Set;for(const n of t)for(const t of e.outVertices(n))r.add(t);return r})(e,t);for(const r of d)i(e,r,t,!0)>a&&d.delete(r);const g=((e,t)=>{const r=Array.from(e),n=Array.from(t);return r.sort(),n.sort(),`${r.join(",")}:${n.join(",")}`})(t,d);if(!l.has(g)){l.add(g),((e,t,r,n,o)=>{if(t.size<o||r.size<o)return!1;for(const o of t){const t=new Set(e.outVertices(o));let i=0;for(const e of r)t.has(e)||(i+=1);if(i>n)return!1}for(const o of r){const r=new Set(e.inVertices(o));let i=0;for(const e of t)r.has(e)||(i+=1);if(i>n)return!1}return!0})(e,t,d,a,u)&&((e,t,r,n)=>{for(const[t,{source:o,target:i}]of e.entries()){const c=s(o,r),f=s(i,n);if(c.size===o.size&&f.size===i.size)e.delete(t);else if(c.size===r.size&&f.size===n.size)return}e.set(t,{source:r,target:n})})(h,g,t,d),c(n,d);for(const r of n){n.delete(r);const i=s(t,new Set(e.inVertices(r))),d=c(new Set(t),i);for(const t of o(d,a)){const o=new Set(i);for(const e of t)o.add(e);f(e,o,r,n,a,u,l,h)}}}};e.exports=((e,t,r,n,i)=>{const s=new Map,c=new Set;for(const a of r){const u=new Set(t);for(const t of e.inVertices(a))u.delete(t);for(const t of o(u,n)){const o=new Set(e.inVertices(a));for(const e of t)o.add(e);f(e,o,a,new Set(r),n,i,c,s)}}return Array.from(s.values()).map(({source:e,target:t})=>{const r=Array.from(e),n=Array.from(t);return r.sort(),n.sort(),{source:r,target:n}})})},264:function(e,t){const r=e=>e.map(e=>e.toString()).join(","),n=e=>{let t=-1/0,r=null;for(const[n,o]of e)o>t&&(t=o,r=n);return r},o=(e,t)=>{const r=new Set;for(const n of t)for(const t of e.outVertices(n))for(const n of e.inVertices(t))r.add(n);return Array.from(r)},i=(e,t,n)=>{const o=new Map;for(const t of n){const n=new Set,i=new Set(e.outVertices(t));o.set(r(Array.from(i)),{source:n,target:i})}for(const r of o.keys()){const n=new Map;for(const t of o.get(r).target)for(const r of e.inVertices(t))n.has(r)||n.set(r,0),n.set(r,n.get(r)+1);for(const e of n.keys())n.get(e)>=t*o.get(r).target.size&&o.get(r).source.add(e)}const i=Array.from(o.values()).filter(({source:e,target:t})=>e.size>1&&t.size>1);if(i.sort((e,t)=>e.source.size===t.source.size?t.target.size-e.target.size:t.source.size-e.source.size),0===i.length)return[];const s=i[0];for(let r=1;r<i.length;++r){const n=new Set(s.source),o=new Set(s.target);for(const e of i[r].source)n.add(e);for(const e of i[r].target)o.add(e);let c=0;for(const t of n)for(const r of o)e.edge(t,r)&&(c+=1);if(c<t*n.size*o.size)break;s.source=Array.from(n),s.target=Array.from(o)}return[s]};e.exports=((e,t,s,c)=>{const f=[];for(const s of((e,t)=>{const o=new Set;for(const r of t)for(const t of e.outVertices(r))o.add(t);const i=new Map;for(const n of t)i.set(n,r(e.outVertices(n)));for(const t of o){const r=e.inVertices(t).map(t=>[t,e.outDegree(t)]),o=n(r);i.set(t,i.get(o))}let s=!1;do{s=!1;for(const r of t){const t=new Map;for(const n of e.outVertices(r)){const e=i.get(n);t.has(e)||t.set(e,0),t.set(e,t.get(e)+1)}const o=n(t.entries());i.get(r)!==o&&(s=!0,i.set(r,o))}for(const t of o){const r=new Map;for(const n of e.inVertices(t)){const e=i.get(n);r.has(e)||r.set(e,0),r.set(e,r.get(e)+1)}const o=n(r.entries());i.get(t)!==o&&(s=!0,i.set(t,o))}}while(s);const c=new Map;for(const e of t){const t=i.get(e);c.has(t)||c.set(t,[]),c.get(t).push(e)}return Array.from(c.values())})(e,t))for(const t of i(e,c,o(e,s)))f.push(t);return f})},265:function(e,t){const r=(e,t,n,o,i,s)=>{for(;0!==o.size;){let c=Array.from(o)[0];o.delete(c);let f=new Set([...n,c]),a=new Set(e.inVertices(c).filter(e=>t.has(e))),u=new Set(Array.from(t).filter(e=>!a.has(e)));a.forEach(e=>{u.delete(e)});let l=new Set([c]),h=new Set,d=new Set,g=!0;for(let t of i){let r=new Set(e.inVertices(t).filter(e=>a.has(e)));if(r.size===a.size){g=!1;break}r.size>0&&(d=d.add(t))}if(g){for(let t of o)if(t!==c){let r=new Set(e.inVertices(t).filter(e=>a.has(e)));if(r.size===a.size){f.add(t),0===new Set(e.inVertices(t).filter(e=>u.has(e))).size&&l.add(t)}else r.size>0&&h.add(t)}0!==h.size?r(e,a,f,h,d,s):a.size>1&&f.size>1&&s.push({source:Array.from(a),target:Array.from(f)})}i=new Set([...i,...l]),o=new Set(Array.from(o).filter(e=>!l.has(e)))}};e.exports=((e,t,n)=>{const o=e.vertices().filter(t=>e.outDegree(t)),i=e.vertices().filter(t=>e.inDegree(t));let s=[];return r(e,new Set(o),new Set,new Set(i),new Set,s),s})},266:function(e,t){const r=(e,t,r,n)=>({source:new Set([t,r]),target:new Set(n.filter(n=>e.edge(t,n)&&e.edge(r,n)))}),n=(e,t)=>new Set(Array.from(e.values()).filter(e=>!t.has(e))),o=(e,t)=>{const r=new Set(e);for(const e of t)r.add(e);return r},i=(e,t)=>e.size===t.size&&0===n(e,t).size;e.exports=((e,t,s)=>{const c=[];for(let n=0;n<t.length;++n){const o=t[n];for(let i=n+1;i<t.length;++i){const n=t[i];c.push(r(e,o,n,s))}}c.sort((e,t)=>e.target.size-t.target.size);const f=[];for(const e of c){let t=!1;if(!(e.target.size<2)){for(const r of f)if(i(e.target,r.target)){r.source=o(e.source,r.source),t=!0;break}for(const r of f){const i=n(e.target,r.target),s=n(r.target,e.target);if(i.size>0&&0===s.size){f.push({source:e.source,target:i}),r.source=o(r.source,e.source),t=!0;break}}t||f.push(e)}}const a=new Map(f.map((e,t)=>[t,!1]));for(let e=0;e<f.length;++e){const t=f[e];if(!a.get(e))for(let r=e+1;r<f.length;++r){const e=f[r];i(t.target,e.target)&&(t.source=o(t.source,e.source),a.set(r,!0))}}for(const e of f)e.source=Array.from(e.source),e.target=Array.from(e.target);return f.filter((e,t)=>!a.get(t)&&e.target.length>1)})},267:function(e,t,r){const n=r(78),o=r(38),i=r(120),s=r(119),c=r(121),f=r(117),a=(e,t,r,o,i,s)=>{const c=new n;for(const r of t)c.addVertex(r,e.vertex(r));for(const t of r)c.addVertex(t,e.vertex(t));for(const n of t)for(const t of r)e.edge(n,t)&&c.addEdge(n,t,e.edge(n,t));for(const n of o(c,t,r)){const t=s(e,n.source,n.target);if(!e.vertex(t)){e.addVertex(t,i(n.source,n.target));for(const r of n.source)e.addEdge(r,t);for(const r of n.target)e.addEdge(t,r);for(const r of e.inVertices(t))for(const n of e.outVertices(t))e.edge(r,n)&&e.removeEdge(r,n)}}},u=new WeakMap;e.exports=class{constructor(){u.set(this,{cycleRemoval:new i.CycleRemoval,layerAssignment:new s.QuadHeuristic,method:f,dummy:()=>({dummy:!0}),idGenerator:()=>Symbol()})}transform(e){this.cycleRemoval().call(e);const t=this.layerAssignment().call(e),r=c(e,t);for(let t=0;t<r.length-1;++t){const n=r[t],o=new Set;let i=0;for(const t of n)for(const r of e.outVertices(t))o.add(r),i+=1;a(e,n,Array.from(o.values()),this.method(),this.dummy(),this.idGenerator())}return e}cycleRemoval(){return o(this,u,"cycleRemoval",arguments)}layerAssignment(){return o(this,u,"layerAssignment",arguments)}method(){return o(this,u,"method",arguments)}dummy(){return o(this,u,"dummy",arguments)}idGenerator(){return o(this,u,"idGenerator",arguments)}}},268:function(e,t){const r=function*(e,t,r){if(0===t.length)return;let n=[],o=e.vertex(t[0])[r?"v":"u"];for(const i of t){const t=e.vertex(i);t.dummy&&t[r?"v":"u"]===o||n.length>0&&(yield n,n=[]),t.dummy&&(n.push(i),o=t[r?"v":"u"])}n.length>0&&(yield n)},n=(e,t,r)=>{let n=0,o=0;for(const i of t)n+=e.vertex(i)[r?"x":"y"],o+=e.vertex(i).origWidth||0;let i=n/t.length-(o-1)/2;for(const n of t)e.vertex(n)[r?"x":"y"]=i,i+=e.vertex(n).origWidth||0};e.exports=((e,t,o)=>{for(let i=0;i<t.length-1;++i)for(const s of r(e,t[i],!1))n(e,s,o);for(let i=t.length-1;i>0;--i)for(const s of r(e,t[i],!0))n(e,s,o)})},269:function(e,t){e.exports=((e,t,{rtol:r=!1})=>{const n=e=>r?e.order<t[e.layer].length-1:e.order>0,o=r?e=>t[e.layer][e.order+1]:e=>t[e.layer][e.order-1],i=t=>{const r=e.vertex(t);if(null!==r.x)return;r.x=0;let s=t;do{const c=e.vertex(s);if(n(c)){const n=o(c),s=e.vertex(n),f=s.root,a=e.vertex(f);if(i(f),r.sink===t&&(r.sink=a.sink),r.sink===a.sink)r.x=Math.max(r.x,a.x+(s.width+c.width)/2);else{const t=e.vertex(a.sink);t.shift=Math.min(t.shift,r.x-a.x-(s.width+c.width)/2)}}s=c.align}while(s!==t)};for(const t of e.vertices()){const r=e.vertex(t);r.sink=t,r.shift=1/0,r.x=null}for(const t of e.vertices())e.vertex(t).root===t&&i(t);for(const t of e.vertices()){const r=e.vertex(t);r.x=e.vertex(r.root).x}for(const t of e.vertices()){const r=e.vertex(t),n=e.vertex(e.vertex(r.root).sink).shift;n<1/0&&(r.x+=n)}})},270:function(e,t){e.exports=((e,t,r=!1)=>{const n=Array.from(r?e.outVertices(t):e.inVertices(t));n.sort((t,r)=>e.vertex(t).order-e.vertex(r).order);const o=(n.length-1)/2;return{left:n[Math.floor(o)],right:n[Math.ceil(o)]}})},271:function(e,t,r){const n=r(270);e.exports=((e,t,{rtol:r=!1,btot:o=!1})=>{const i=function*(e){if(r)for(let t=e.length-1;t>=0;--t)yield e[t];else for(let t=0;t<e.length;++t)yield e[t]},s=o?(t,r)=>e.edge(r,t):(t,r)=>e.edge(t,r),c=o?t=>e.outDegree(t):t=>e.inDegree(t),f=o?(e,t)=>n(e,t,!0):(e,t)=>n(e,t);for(const t of e.vertices())e.vertex(t).root=t,e.vertex(t).align=t;for(const n of function*(){if(o)for(let e=t.length-2;e>=0;--e)yield t[e];else for(let e=1;e<t.length;++e)yield t[e]}()){let t=r?1/0:-1/0;for(const o of i(n))if(c(o)>0){const{left:n,right:i}=f(e,o),c=n===i?[n]:r?[i,n]:[n,i];for(const n of c)if(!s(n,o).type1Conflict&&!s(n,o).type2Conflict&&(r?t>e.vertex(n).order:t<e.vertex(n).order)){e.vertex(o).align=e.vertex(o).root=e.vertex(n).root,e.vertex(n).align=o,t=e.vertex(n).order;break}}}})},272:function(e,t){e.exports=((e,t,r)=>{const n=[];for(const t of r)for(const r of e.inVertices(t))n.push([r,t]);return n})},273:function(e,t,r){const n=r(272),o=(e,t)=>{const r=[],n=[];for(const o of e)t(o)?r.push(o):n.push(o);return[r,n]};e.exports=((e,t)=>{const r=t.length-2,i={},s={},c=([e,t])=>i[e]&&i[t];for(const t of e.vertices()){const r=e.vertex(t);i[t]=!!r.dummy,s[t]=r.order}for(let i=1;i<r;++i){const r=t[i],f=t[i+1],a=n(e,r,f),[u,l]=o(a,c);for(const[t,r]of u)for(const[n,o]of l)(s[t]<s[n]&&s[r]>s[o]||s[t]>s[n]&&s[r]<s[o])&&(e.edge(n,o).type1Conflict=!0)}})},274:function(e,t,r){const n=r(273),o=r(271),i=r(269),s=(e,t)=>{n(e,t);const r={};for(const t of e.vertices())r[t]=[];const s=[{rtol:!1,btot:!1},{rtol:!0,btot:!1},{rtol:!1,btot:!0},{rtol:!0,btot:!0}];let c=-1/0,f=1/0;for(let n=0;n<s.length;++n){const a=s[n];o(e,t,a),i(e,t,a);let u=1/0,l=-1/0;for(const t of e.vertices())a.rtol&&(e.vertex(t).x=-e.vertex(t).x),u=Math.min(u,e.vertex(t).x),l=Math.max(l,e.vertex(t).x);l-u<f-c&&(c=u,f=l);for(const t of e.vertices())r[t].push(e.vertex(t).x)}for(let t=0;t<s.length;++t){if(s[t].rtol){let n=-1/0;for(const o of e.vertices())n=Math.max(n,r[o][t]);for(const o of e.vertices())r[o][t]+=f-n}else{let n=1/0;for(const o of e.vertices())n=Math.min(n,r[o][t]);for(const o of e.vertices())r[o][t]+=c-n}}for(const t of e.vertices())r[t].sort((e,t)=>e-t),e.vertex(t).x=(r[t][1]+r[t][2])/2};const c=e=>{let t=1/0,r=1/0;for(const n of e.vertices()){const o=e.vertex(n);t=Math.min(t,o.x-o.origWidth/2),r=Math.min(r,o.y-o.origHeight/2)}for(const n of e.vertices()){const o=e.vertex(n);o.x-=t,o.y-=r}};e.exports=class{call(e,t){s(e,t);let r=0;for(const n of t){let t=0;for(const r of n)t=Math.max(t,e.vertex(r).height);r+=t/2;for(const t of n)e.vertex(t).y=r;r+=t/2}c(e)}}},275:function(e,t,r){const n=r(274);e.exports={Brandes:n}},276:function(e,t){e.exports=((e,t,r)=>{const n=t.length,o=r.length,i={},s=new Int8Array(n*o);for(let e=0;e<o;++e)i[r[e]]=e;for(let r=0;r<n;++r){const n=t[r];for(const t of e.outVertices(n))s[r*o+i[t]]=1}return s})},277:function(e,t,r){const n=r(276);e.exports=((e,t,r,o=!1)=>{const i={},s=t.length,c=r.length,f=n(e,t,r),a=(e,t)=>i[e]-i[t];if(o){for(let e=0;e<s;++e){let r=0,n=0;for(let t=0;t<c;++t){const o=f[e*c+t];n+=o,r+=t*o}i[t[e]]=r/n}t.sort(a)}else{for(let e=0;e<c;++e){let t=0,n=0;for(let r=0;r<s;++r){const o=f[r*c+e];n+=o,t+=r*o}i[r[e]]=t/n}r.sort(a)}})},278:function(e,t,r){const n=r(38),o=r(277),i=new WeakMap;e.exports=class{constructor(){i.set(this,{repeat:8,method:o})}call(e,t){const r=t.length,n=this.repeat(),o=this.method();for(let i=0;i<n;++i){for(let n=1;n<r;++n)o(e,t[n-1],t[n]);for(let n=r-1;n>0;--n)o(e,t[n-1],t[n],!0)}}repeat(e){return n(this,i,"repeat",arguments)}method(e){return n(this,i,"method",arguments)}}},279:function(e,t,r){const n=r(278);e.exports={LayerSweep:n}},280:function(e,t){e.exports=((e,t,r,n,o)=>{var i,s,c;for(let[f,a]of e.edges()){const u=e.edge(f,a);if(r[a]-r[f]>1){for(s=f,i=r[f]+1;i<r[a];++i)c=Symbol(),e.addVertex(c,{u:f,v:a,dummy:!0,width:u.width+n,origWidth:u.width,height:o,origHeight:0,layer:i}),e.addEdge(s,c,{u:f,v:a,dummy:!0,reversed:e.edge(f,a).reversed,width:u.width}),t[i].push(c),s=c;e.addEdge(s,a,{u:f,v:a,dummy:!0,reversed:e.edge(f,a).reversed,width:u.width}),e.removeEdge(f,a)}}})},281:function(e,t,r){const n=r(38),o=r(118),i=(e,t)=>{const r=(new o).call(e);let n=1/0,i=-1/0;for(const t of e.vertices())n=Math.min(n,r[t]),i=Math.max(i,r[t]);for(const t of e.vertices())0===e.inDegree(t)?r[t]=0:r[t]-=n;const s=e.vertices().filter(t=>e.inDegree(t)>0&&e.outDegree(t)>0),c={},f=(e,t)=>c[t]-c[e];for(let n=0;n<t;++n){for(const t of e.vertices())c[t]=0;for(const[t,n]of e.edges()){const e=r[n]-r[t];c[t]+=e,c[n]+=e}s.sort(f);for(const t of s){let n=0,o=0,i=-1/0,s=1/0;for(const s of e.inVertices(t)){const e=r[s];i=Math.max(i,e),n+=e,o+=1}for(const i of e.outVertices(t)){const e=r[i];s=Math.min(s,e),n+=e,o+=1}r[t]=Math.min(s-1,Math.max(i+1,Math.round(n/o)))}}return r},s=new WeakMap;e.exports=class{constructor(){s.set(this,{repeat:4})}call(e){return i(e,this.repeat())}repeat(){return n(this,s,"repeat",arguments)}}},282:function(e,t){e.exports=function(e){const t={},r={},n=[],o=i=>{if(!r[i]){r[i]=!0,t[i]=!0;for(let r of e.outVertices(i))t[r]?n.push([i,r]):o(r);delete t[i]}};for(let t of e.vertices())o(t);return n}},283:function(e,t,r){const n=r(282),o=e=>{for(const[t,r]of n(e)){const n=e.edge(t,r);if(e.removeEdge(t,r),t===r)continue;const o=e.edge(r,t);o?o.multiple=!0:e.addEdge(r,t,Object.assign({reversed:!0},n))}};e.exports=class{call(e){o(e)}}},284:function(e,t){const r=(e,t,n,o)=>{if(o.has(t)){const r=o.get(t);if(r!==n)for(const t of e.vertices())o.get(t)===r&&o.set(t,n)}else{o.set(t,n);for(const i of e.outVertices(t))r(e,i,n,o)}};e.exports=(e=>{const t=new Map;for(const n of e.vertices())0===e.inDegree(n)&&r(e,n,n,t);const n=new Set(t.values());return Array.from(n).map(r=>e.vertices().filter(e=>t.get(e)===r))})},285:function(e,t,r){const n=r(78),o=r(38),i=r(284),s=r(121),c=r(120),f=r(119),a=r(280),u=r(279),l=r(275),h=r(268),d=(e,{ltor:t,vertexWidth:r,vertexHeight:o,edgeWidth:i,layerMargin:s,vertexMargin:c,vertexLeftMargin:f,vertexRightMargin:a,vertexTopMargin:u,vertexBottomMargin:l})=>{const h=new n;for(const n of e.vertices()){const i=e.vertex(n),d=r({u:n,d:i}),g=o({u:n,d:i}),v=f({u:n,d:i})+a({u:n,d:i}),x=u({u:n,d:i})+l({u:n,d:i});h.addVertex(n,{width:t?g+c+x:d+s+v,height:t?d+s+v:g+c+x,origWidth:t?g:d,origHeight:t?d:g})}for(const[t,r]of e.edges())h.addEdge(t,r,{width:i({u:t,v:r,ud:e.vertex(t),vd:e.vertex(r),d:e.edge(t,r)})});return h},g=(e,t)=>{let r=1;for(;r<e.length-1;){(t?e[r][1]:e[r][0])===(t?e[r+1][1]:e[r+1][0])?e.splice(r,2):r+=2}},v=e=>{const t=[];for(const r of e)t.unshift(r);return t},x=(e,t,r)=>{const n={vertices:{},edges:{}},o=[];for(const t of e.vertices())n.edges[t]={};for(const r of t){let t=-1/0;for(const n of r)t=Math.max(t,e.vertex(n).origHeight||0);o.push(t)}for(let i=0;i<t.length;++i){const s=t[i],c=o[i];for(const t of s){const s=e.vertex(t);if(!s.dummy){n.vertices[t]={x:r?s.y:s.x,y:r?s.x:s.y,width:r?s.origHeight:s.origWidth,height:r?s.origWidth:s.origHeight,layer:s.layer,order:s.order};for(const f of e.outVertices(t)){const a=r?[[s.y+(s.origHeight||0)/2,s.x],[s.y+c/2,s.x]]:[[s.x,s.y+(s.origHeight||0)/2],[s.x,s.y+c/2]];let u=f,l=e.vertex(u),h=i+1;for(;l.dummy;)r?(a.push([l.y-o[h]/2,l.x]),a.push([l.y+o[h]/2,l.x])):(a.push([l.x,l.y-o[h]/2]),a.push([l.x,l.y+o[h]/2])),u=e.outVertices(u)[0],l=e.vertex(u),h+=1;r?(a.push([l.y-o[h]/2,l.x]),a.push([l.y-(l.origHeight||0)/2,l.x])):(a.push([l.x,l.y-o[h]/2]),a.push([l.x,l.y-(l.origHeight||0)/2])),g(a,r),e.edge(t,f).reversed?n.edges[u][t]={points:v(a),reversed:!0,width:e.edge(t,f).width}:n.edges[t][u]={points:a,reversed:!1,width:e.edge(t,f).width}}}}}return n},y=new WeakMap;e.exports=class{constructor(){y.set(this,{vertexWidth:({d:e})=>e.width,vertexHeight:({d:e})=>e.height,edgeWidth:()=>1,layerMargin:10,vertexMargin:10,vertexLeftMargin:()=>0,vertexRightMargin:()=>0,vertexTopMargin:()=>0,vertexBottomMargin:()=>0,edgeMargin:10,ltor:!0,edgeBundling:!1,cycleRemoval:new c.CycleRemoval,layerAssignment:new f.QuadHeuristic,crossingReduction:new u.LayerSweep,positionAssignment:new l.Brandes})}layout(e){const t=d(e,{vertexWidth:this.vertexWidth(),vertexHeight:this.vertexHeight(),edgeWidth:this.edgeWidth(),layerMargin:this.layerMargin(),vertexMargin:this.vertexMargin(),vertexLeftMargin:this.vertexLeftMargin(),vertexRightMargin:this.vertexRightMargin(),vertexTopMargin:this.vertexTopMargin(),vertexBottomMargin:this.vertexBottomMargin(),ltor:this.ltor()});this.cycleRemoval().call(t);const r=this.layerAssignment().call(t),n=s(t,r,!0);a(t,n,r,this.edgeMargin(),this.layerMargin());const o=n.map(()=>[]);for(const e of i(t)){const r=new Set(e),i=n.map(e=>e.filter(e=>r.has(e)));this.crossingReduction().call(t,i);for(let e=0;e<n.length;++e)for(const t of i[e])o[e].push(t)}for(let e=0;e<o.length;++e){const r=o[e];for(let n=0;n<r.length;++n){const o=r[n];t.vertex(o).layer=e,t.vertex(o).order=n}}return this.positionAssignment().call(t,o),this.edgeBundling()&&h(t,o,this.ltor()),x(t,o,this.ltor())}vertexWidth(){return o(this,y,"vertexWidth",arguments)}vertexHeight(){return o(this,y,"vertexHeight",arguments)}edgeWidth(){return o(this,y,"edgeWidth",arguments)}layerMargin(){return o(this,y,"layerMargin",arguments)}vertexMargin(){return o(this,y,"vertexMargin",arguments)}edgeMargin(){return o(this,y,"edgeMargin",arguments)}vertexLeftMargin(){return o(this,y,"vertexLeftMargin",arguments)}vertexRightMargin(){return o(this,y,"vertexRightMargin",arguments)}vertexTopMargin(){return o(this,y,"vertexTopMargin",arguments)}vertexBottomMargin(){return o(this,y,"vertexBottomMargin",arguments)}ltor(){return o(this,y,"ltor",arguments)}edgeBundling(){return o(this,y,"edgeBundling",arguments)}cycleRemoval(){return o(this,y,"cycleRemoval",arguments)}layerAssignment(){return o(this,y,"layerAssignment",arguments)}crossingReduction(){return o(this,y,"crossingReduction",arguments)}positionAssignment(){return o(this,y,"positionAssignment",arguments)}}},286:function(e,t,r){const n=r(122);e.exports=(e=>{const t=new n;for(const r of e.vertices())t.addVertex(r,e.vertex(r));for(const[r,n]of e.edges())t.addEdge(r,n,e.edge(r,n));return t})},287:function(e,t){e.exports=class{edges(){const e=[];for(const t of this.vertices())for(const r of this.outVertices(t))e.push([t,r]);return e}*outEdges(e){for(let t of this.outVertices(e))yield[e,t]}*inEdges(e){for(let t of this.inVertices(e))yield[t,e]}toJSON(){return{vertices:this.vertices().map(e=>({u:e,d:this.vertex(e)})),edges:this.edges().map(([e,t])=>({u:e,v:t,d:this.edge(e,t)}))}}toString(){return JSON.stringify(this.toJSON())}}},288:function(e,t,r){"use strict";var n=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,c=e[Symbol.iterator]();!(n=(s=c.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{!n&&c.return&&c.return()}finally{if(o)throw i}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=v(r(78)),i=v(r(286)),s=v(r(285)),c=v(r(267)),f=v(r(117)),a=v(r(266)),u=v(r(265)),l=v(r(264)),h=v(r(263)),d=v(r(79)),g=v(r(261));function v(e){return e&&e.__esModule?e:{default:e}}function x(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}var y=function(e,t){return t.filter(function(t){return e.indexOf(t)>=0}).length},m=function(e,t){var r=t.layerMargin,o=t.vertexMargin,v=function(e,t){var r=t.filteredVertices,n=t.biclusteringOption,o=t.epsilon;if(r.size>0){var s=!0,v=!1,x=void 0;try{for(var y,m=e.vertices()[Symbol.iterator]();!(s=(y=m.next()).done);s=!0){var p=y.value;r.has(p)||e.removeVertex(p)}}catch(e){v=!0,x=e}finally{try{!s&&m.return&&m.return()}finally{if(v)throw x}}}if(n===d.default.NONE.value)return e;var w=(new c.default).layerAssignment((0,g.default)(e)).idGenerator(function(e,t,r){return(t=Array.from(t)).sort(),(r=Array.from(r)).sort(),t.join(",")+":"+r.join(",")}).dummy(function(){return{dummy:!0,name:"",color:"#888"}});switch(n){case d.default.EDGE_CONCENTRATION.value:w.method(f.default);break;case d.default.NEWBERY.value:w.method(a.default);break;case d.default.MBEA.value:w.method(u.default);break;case d.default.QUASI_BICLIQUES.value:w.method(function(e,t,r){return(0,l.default)(e,t,r,o)});break;case d.default.COMPLETE_QUASI_BICLIQUES.value:w.method(function(e,t,r){return(0,h.default)(e,t,r,1,3)})}return w.transform((0,i.default)(e))}(e,t),m=(new s.default).layerAssignment((0,g.default)(v)).layerMargin(r).vertexWidth(function(e){return e.d.dummy?25:160}).vertexHeight(function(e){return e.d.dummy?10:20}).vertexMargin(o).edgeWidth(function(){return 3}).edgeMargin(3).edgeBundling(!0).layout(v),p=[],w=!0,M=!1,b=void 0;try{for(var V,S=v.vertices()[Symbol.iterator]();!(w=(V=S.next()).done);w=!0){var E=V.value,z=v.vertex(E),A=new Set,O=!0,_=!1,R=void 0;try{for(var k,j=v.inVertices(E)[Symbol.iterator]();!(O=(k=j.next()).done);O=!0){var W=k.value;A.add(W)}}catch(e){_=!0,R=e}finally{try{!O&&j.return&&j.return()}finally{if(_)throw R}}var I=!0,B=!1,C=void 0;try{for(var H,N=v.outVertices(E)[Symbol.iterator]();!(I=(H=N.next()).done);I=!0){var L=H.value;A.add(L)}}catch(e){B=!0,C=e}finally{try{!I&&N.return&&N.return()}finally{if(B)throw C}}z.neighbors=Array.from(A),z.dummy&&(z.U=v.inVertices(E),z.L=v.outVertices(E));var D=m.vertices[E],P=D.x,T=D.y,Q=D.width,$=D.height;p.push({u:E,d:z,x:P,y:T,width:Q,height:$})}}catch(e){M=!0,b=e}finally{try{!w&&S.return&&S.return()}finally{if(M)throw b}}var U=[],G=!0,q=!1,J=void 0;try{for(var Y,F=v.edges()[Symbol.iterator]();!(G=(Y=F.next()).done);G=!0){var K=Y.value,X=n(K,2),Z=X[0],ee=X[1];if(m.edges[Z][ee]){for(var te=v.edge(Z,ee),re=v.vertex(Z),ne=v.vertex(ee),oe=m.edges[Z][ee],ie=oe.points,se=oe.width,ce=oe.reversed;ie.length<6;)ie.push(ie[ie.length-1]);var fe=void 0;fe=re.dummy?y(re.U,e.inVertices(ee))/re.U.length:ne.dummy?y(ne.L,e.outVertices(Z))/ne.L.length:1,U.push({u:Z,v:ee,ud:re,vd:ne,d:te,points:ie,reversed:ce,width:se,opacity:fe})}}}catch(e){q=!0,J=e}finally{try{!G&&F.return&&F.return()}finally{if(q)throw J}}return Object.assign({vertices:p,edges:U},function(e){var t=Math.min.apply(Math,[0].concat(x(e.map(function(e){return e.x-e.width/2})))),r=Math.max.apply(Math,[0].concat(x(e.map(function(e){return e.x+e.width/2})))),n=Math.min.apply(Math,[0].concat(x(e.map(function(e){return e.y-e.height/2}))));return{width:r-t,height:Math.max.apply(Math,[0].concat(x(e.map(function(e){return e.y+e.height/2}))))-n}}(p))};onmessage=function(e){var t=e.data,r=t.vertices,n=t.edges,i=t.options,s=new o.default,c=!0,f=!1,a=void 0;try{for(var u,l=r[Symbol.iterator]();!(c=(u=l.next()).done);c=!0){var h=u.value,d=h.u,g=h.d;s.addVertex(d,g)}}catch(e){f=!0,a=e}finally{try{!c&&l.return&&l.return()}finally{if(f)throw a}}var v=!0,x=!1,y=void 0;try{for(var p,w=n[Symbol.iterator]();!(v=(p=w.next()).done);v=!0){var M=p.value,b=M.u,V=M.v,S=M.d;s.addEdge(b,V,S)}}catch(e){x=!0,y=e}finally{try{!v&&w.return&&w.return()}finally{if(x)throw y}}i.filteredVertices=new Set(i.filteredVertices),postMessage(m(s,i))}},38:function(e,t){e.exports=((e,t,r,n)=>0===n.length?t.get(e)[r]:(t.get(e)[r]=n[0],e))},78:function(e,t,r){e.exports=r(122)},79:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={EDGE_CONCENTRATION:{name:"Edge Concentration",value:"edge-concentration"},NEWBERY:{name:"Newbery",value:"newbery"},MBEA:{name:"MBEA",value:"mbea"},QUASI_BICLIQUES:{name:"Quasi-bicliques",value:"quasi-bicliques"},COMPLETE_QUASI_BICLIQUES:{name:"Complete Quasi-bicliques",value:"complete-quasi-bicliques"},NONE:{name:"None",value:"none"}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,